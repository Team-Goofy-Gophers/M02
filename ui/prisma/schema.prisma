// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth

model User {
    id String @id @default(cuid())

    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    password      String?

    accounts Account[]
    sessions Session[]

    UsageStats   UsageStats?
    UserSettings UserSettings?

    Collection Collection[]
    Prompt     Prompt[]
    Dataset    Dataset[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id String @id @default(cuid())

    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    refresh_token_expires_in Int?

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id @default(cuid())

    sessionToken String   @unique
    expires      DateTime

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([identifier, token])
}

model AppSettings {
    id String @id @default(cuid())

    howItWorks Json

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserSettings {
    userId String @id @unique
    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    defaultExportFormat DocumentType @default(CSV)
    hideSensitiveData   Boolean      @default(false)
    emailNotifications  Boolean      @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Collection {
    id String @id @default(cuid())

    name String

    userId String
    User   User   @relation(fields: [userId], references: [id])

    Documents Document[]
    AgentRuns AgentRun[]
    Prompts   Prompt[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Document {
    id String @id @default(cuid())

    collectionId String
    name         String
    sourceUrl    String?
    metadata     Json?

    type   DocumentType
    status DocumentStatus

    collection Collection @relation(fields: [collectionId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model AgentRun {
    id String @id @default(cuid())

    collectionId  String
    modelUsed     String
    startedAt     DateTime  @default(now())
    finishedAt    DateTime?
    outputSummary Json?
    confidenceMap Json?

    status AgentRunStatus

    collection Collection @relation(fields: [collectionId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Prompt {
    id           String @id @default(cuid())
    userId       String
    collectionId String
    content      String

    result     PromptResult?
    user       User          @relation(fields: [userId], references: [id])
    collection Collection    @relation(fields: [collectionId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PromptResult {
    id        String  @id @default(cuid())
    promptId  String  @unique
    tableData Json
    schema    Json?
    summary   String?
    chartData Json?

    prompt Prompt @relation(fields: [promptId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Dataset {
    id String @id @default(cuid())

    name         String
    sourcePrompt String
    schema       Json
    rows         Json

    userId String
    User   User   @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UsageStats {
    id             String    @id @default(cuid())
    totalDocs      Int       @default(0)
    totalDatasets  Int       @default(0)
    mostUsedModels Json?
    lastActive     DateTime?

    userId String @unique
    User   User   @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum DocumentType {
    CSV
    JSON
    TXT
    PDF
    DOCX
    IMAGE
    OTHER
}

enum DocumentStatus {
    PENDING
    PROCESSING
    COMPLETE
    FAILED
}

enum AgentRunStatus {
    PENDING
    RUNNING
    FAILED
    COMPLETE
}
