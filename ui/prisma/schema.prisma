// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth

model User {
    id String @id @default(cuid())

    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    password      String?

    accounts Account[]
    sessions Session[]

    Collection Collection[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id String @id @default(cuid())

    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    refresh_token_expires_in Int?

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id @default(cuid())

    sessionToken String   @unique
    expires      DateTime

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([identifier, token])
}

model AppSettings {
    id String @id @default(cuid())

    howItWorks String @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Collection {
    id String @id @default(cuid())

    name String

    userId String
    User   User   @relation(fields: [userId], references: [id])

    Documents Document[]
    Prompts   Prompt[]
    Datasets  Dataset[]
    Clusters  Cluster[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Document {
    id String @id @default(cuid())

    name      String
    sourceUrl String?
    size      Int

    type   DocumentType
    status DocumentStatus

    clusterId String?
    Cluster   Cluster? @relation(fields: [clusterId], references: [id])

    collectionId String
    Collection   Collection @relation(fields: [collectionId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cluster {
    id String @id @default(cuid())

    title       String
    description String
    summary     String
    confidence  Float

    agentsUsed String[]

    status ClusterStatus

    collectionId String
    Collection   Collection @relation(fields: [collectionId], references: [id])

    Documents Document[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Prompt {
    id String @id @default(cuid())

    content String

    PromptResult PromptResult?

    collectionId String
    Collection   Collection @relation(fields: [collectionId], references: [id])

    Dataset Dataset[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PromptResult {
    id String @id @default(cuid())

    tableData Json?
    schema    Json?
    summary   String?
    chartData Json?

    promptId String @unique
    Prompt   Prompt @relation(fields: [promptId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Dataset {
    id String @id @default(cuid())

    name   String
    schema Json
    rows   Json

    promptId     String
    sourcePrompt Prompt @relation(fields: [promptId], references: [id])

    collectionId String
    Collection   Collection @relation(fields: [collectionId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum DocumentType {
    CSV
    JSON
    TXT
    PDF
    DOCX
    IMAGE
    OTHER
}

enum DocumentStatus {
    PENDING
    PROCESSING
    COMPLETE
    FAILED
}

enum ClusterStatus {
    PENDING
    RUNNING
    FAILED
    COMPLETE
}
